//
//  FOSLoginManagerTests.m
//  FOSFoundation
//
//  Created by David Hunt on 12/28/12.
//  Copyright (c) 2012 FOS Computer Services. All rights reserved.
//

#import "FOSLoginManagerTests.h"
#import "FOSFoundationTests.h"
#import "FOSFoundation.h"
#import "User.h"
#import "Widget.h"
#import "FOSLoginManager_Internal.h"
#import <stdlib.h>

@implementation FOSLoginManagerTests
#pragma mark - Class methods

+ (FOSNetworkStatusMonitor *)networkStatusMonitor {
    static FOSNetworkStatusMonitor *__statusMonitor = nil;

    if (__statusMonitor == nil) {
        __statusMonitor = [FOSNetworkStatusMonitor statusMonitorForParse];
    }

    return __statusMonitor;
}

+ (void)setupStandardWebServiceConfig {
    [self setupStandardWebServiceConfigWithOptions:FOSRESTConfigAllowStaticTableModifications];
}

+ (void)setupStandardWebServiceConfigWithOptions:(FOSRESTConfigOptions)configOptions {

    [FOSRESTConfig resetSharedInstance];

    // Force to forget that we were logged in via a previous session
    [FOSLoginManager clearLoggedInUserId];

<<<<<<< Updated upstream
        NSPersistentStoreCoordinator *storeCoord = [self _setupDB];
=======
    NSPersistentStoreCoordinator *storeCoord = [self _setupDB];
    FOSNetworkStatusMonitor *statusMonitor = [FOSNetworkStatusMonitor statusMonitorForParse];
>>>>>>> Stashed changes

    NSURL *baseURL = [NSURL URLWithString:@"https://api.parse.com"];
    NSDictionary *requestHeaders = @{
        @"X-Parse-Application-Id" : @"uMDqEYDMrjEFRo4vtlhx4qaFVwrvw68cPPMsVHqp",
        @"X-Parse-REST-API-Key" : @"XXRQQ3349yU4AV3wsVxetNAwOpnkYVCVloPCVppu",
    };

<<<<<<< Updated upstream
        [FOSRESTConfig configWithBaseURL:baseURL
                                 options:configOptions
                          requestHeaders:requestHeaders
                             userSubType:[User class]
                          defaultTimeout:20.0
                        storeCoordinator:storeCoord
                    networkStatusMonitor:[self networkStatusMonitor]
                     andAnalyticsManager:[[FOSParseAnalyticsManager alloc] init]];
=======
    [FOSRESTConfig configWithBaseURL:baseURL
                             options:configOptions
                      requestHeaders:requestHeaders
                         userSubType:[User class]
                      defaultTimeout:20.0
                    storeCoordinator:storeCoord
                networkStatusMonitor:statusMonitor
                 andAnalyticsManager:[[FOSParseAnalyticsManager alloc] init]];
>>>>>>> Stashed changes

    // Block waiting for network status
    NSAssert([FOSRESTConfig sharedInstance].networkStatus != FOSNetworkStatusNotReachable,
             @"Network unreachable.  Cannot execute tests.");
}

+ (void)tearDownWebService {
    START_TEST

    // Clean up some tables so that we don't have ever-growing tables
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"NOT (name BEGINSWITH %@)",
                         @"TestWidget - Don't Delete"];
    NSArray *widgets = [Widget fetchWithPredicate:pred];

    if (widgets.count > 0) {
        for (Widget *next in widgets) {
            [next.managedObjectContext deleteObject:next];
        }

        [[FOSRESTConfig sharedInstance].cacheManager flushCaches:^(BOOL cancelled, NSError *error) {
            END_TEST
        }];

        WAIT_FOR_TEST_END
    }
}

+ (void)setupStandardWebServiceConfigAndLogInWithOptions:(FOSRESTConfigOptions)configOptions {
    START_TEST

    [self setupStandardWebServiceConfigAndLogInWithOptions:configOptions andCallback:^{
        END_TEST
    }];

    WAIT_FOR_TEST_END
}

+ (void)setupStandardWebServiceConfigAndLogInWithOptions:(FOSRESTConfigOptions)configOptions andCallback:(TestCallBack)handler {
    NSParameterAssert(handler != nil);

    [self setupStandardWebServiceConfigWithOptions:configOptions];

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    if (!lm.isLoggedIn) {
        User *user = [self _testUser];

        [lm loginUser:user handler:^(BOOL succeeded, NSError *error) {
            NSAssert(succeeded, @"Failed login: %@", error.description);

            if (succeeded) {
                NSAssert(lm.isLoggedIn, @"Not logged in???");
                NSAssert([FOSRESTConfig sharedInstance].loginManager.loggedInUser != nil,
                         @"Why not logged in user in the DB?");

                // Add the user authentication token
                if (((User *)lm.loggedInUser).sessionToken.length > 0) {
                    NSString *kParseSessionTokenKey = @"X-Parse-Session-Token";

                    FOSRESTConfig *cacheConfig = [FOSRESTConfig sharedInstance];

                    NSMutableDictionary *requestHeaders = [cacheConfig.requestHeaders mutableCopy];

                    requestHeaders[kParseSessionTokenKey] = ((User *)lm.loggedInUser).sessionToken;
                    cacheConfig.requestHeaders = requestHeaders;
                }
            }

            handler();
        }];
    }
}

+ (void)tearDownWebServiceAndLogOut {
    [self tearDownWebService];

    START_TEST

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    if (lm.isLoggedIn) {

        [lm logout:^(BOOL succeeded, NSError *error) {
            END_TEST
        }];
    }
    else {
        [[FOSRESTConfig sharedInstance].cacheManager flushCaches:^(BOOL isCancelled, NSError *error) {
            END_TEST
        }];
    }

    WAIT_FOR_TEST_END
}

#pragma mark - Test Configuration Methods

- (void)setUp {
    [super setUp];

    [[self class] setupStandardWebServiceConfig];
}

- (void)tearDown {
    // Tear-down code here.

    [[self class] tearDownWebServiceAndLogOut];

    [super tearDown];
}

#pragma mark - Login Tests

- (void)testKnownUserLogin {
    User *user = [[self class] _testUser];
    START_TEST

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    [lm loginUser:user handler:^(BOOL succeeded, NSError *error) {
        XCTAssertTrue([NSThread isMainThread], @"Wrong thread!");
        XCTAssertTrue(succeeded, @"Failed login: %@", error.description);

        if (succeeded) {
            XCTAssertTrue(lm.isLoggedIn, @"Not logged in???");
            XCTAssertTrue(lm.loggedInUserId != nil, @"No uid???");
            XCTAssertNotNil(lm.loggedInUser, @"No logged in user?");

            XCTAssertTrue([(NSString *)lm.loggedInUserId isEqualToString:(NSString *)lm.loggedInUser.uid],
                         @"Ids not equal?");
            XCTAssertTrue([lm.loggedInUser isKindOfClass:[FOSRESTConfig sharedInstance].userSubType],
                         @"Wrong user type.");

            User *loggedInUser = (User *)lm.loggedInUser;
            
            XCTAssertTrue([user.username isEqualToString:loggedInUser.username],
                         @"Username '%@' wrong, expected '%@'", loggedInUser.username, user.username);
        }

        END_TEST
    }];

    WAIT_FOR_TEST_END
}

- (void)testUnknownUserLogin {
    User *user = [[self class] _testUnknownUser];
    START_TEST

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    [lm loginUser:user handler:^(BOOL succeeded, NSError *error) {
        XCTAssertTrue([NSThread isMainThread], @"Wrong thread!");
        XCTAssertFalse(succeeded, @"Failed succeeded???");

        if (!succeeded) {
            XCTAssertFalse(lm.isLoggedIn, @"Logged in???");
            XCTAssertNil(lm.loggedInUserId, @"Logged in id???");
            XCTAssertNil(lm.loggedInUser, @"Logged in user?");
        }

        END_TEST
    }];
    
    WAIT_FOR_TEST_END
}



#pragma mark - Refresh User tests

- (void)testRefreshUser {
    User *user = [[self class] _testUser];
    START_TEST

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    [lm loginUser:user handler:^(BOOL succeeded, NSError *error) {
        [lm refreshLoggedInUser:^(BOOL succeeded, NSError *error) {
            XCTAssertTrue([NSThread isMainThread], @"Wrong thread!");
            XCTAssertTrue(succeeded, @"Failed: %@", error.description);
            XCTAssertTrue([FOSRESTConfig sharedInstance].loginManager.isLoggedIn, @"Not logged in???");

            END_TEST
        }];
    }];

    WAIT_FOR_TEST_END
}

//#define TEST_PWD_RESET
#ifdef TEST_PWD_RESET
- (void)testPasswordReset {
    START_TEST

    FOSLoginManager *lm = [FOSRESTConfig sharedInstance].loginManager;
    [lm resetPasswordForResetKey:@"email" andValue:@"david@familyof7.net" handler:^(BOOL succeeded, NSError *error) {
        STAssertTrue([NSThread isMainThread], @"Wrong thread!");
        STAssertTrue(succeeded, @"Failed password reset call: %@", error.description);

        END_TEST
    }];

    WAIT_FOR_TEST_END
}
#endif

- (void)testCreateUser {
    START_TEST

    static BOOL randomSeeded = NO;
    if (!randomSeeded) {
        srandom((unsigned)[[NSDate date] timeIntervalSince1970]);
        randomSeeded = YES;
    }

    long randomNum = random();

    User *newUser = [[User alloc] init];
    newUser.username = [NSString stringWithFormat:@"test_%li_%li", randomNum,
                        (long)[[NSDate date] timeIntervalSince1970]];
    newUser.password = @"test_pWd";
    newUser.email = [NSString stringWithFormat:@"foo_%li_%li@bar.com", randomNum,
                     (long)[[NSDate date] timeIntervalSince1970]];

    [[FOSRESTConfig sharedInstance].databaseManager saveChanges];

    [[FOSRESTConfig sharedInstance].loginManager createUser:newUser handler:^(BOOL succeeded, NSError *error) {
        XCTAssertTrue([NSThread isMainThread], @"Wrong thread!");
        XCTAssertTrue(succeeded, @"Failed???");
        XCTAssertNil(error, @"Error creating user: %@", error.description);
        XCTAssertTrue(succeeded || error != nil, @"Failed, but no error??");
        XCTAssertTrue(error == nil || !succeeded, @"Error, but succeeded???");

        NSString *newUserUid = (NSString *)newUser.uid;

        if (succeeded) {
            [[FOSRESTConfig sharedInstance].loginManager loginUser:newUser handler:^(BOOL succeeded, NSError *error) {
                FOSLoginManager *loginMgr = [FOSRESTConfig sharedInstance].loginManager;

                XCTAssertTrue([NSThread isMainThread], @"Wrong thread!");
                XCTAssertTrue(succeeded, @"Login failed: %@", error);
                XCTAssertTrue(loginMgr.isLoggedIn, @"Not logged in???");
                NSString *loggedInUid = (NSString *)loginMgr.loggedInUserId;
                XCTAssertTrue([newUserUid isEqualToString:loggedInUid],
                             @"Wrong logged in uid: %@", loggedInUid);
                XCTAssertTrue([(NSString *)loginMgr.loggedInUser.uid isEqualToString:newUserUid],
                             @"Wrong logged in user.uid: %@", loginMgr.loggedInUser.uid);


                END_TEST
            }];
        }
        else {
            END_TEST
        }
    }];

    WAIT_FOR_TEST_END
}

- (void)testLocalOnlyUser {
    START_TEST

    User *localOnlyUser = [[User alloc] init];
    localOnlyUser.objectId = @"test_localOnly_user";
    localOnlyUser.username = @"test_localOnly_user";
    localOnlyUser.password = @"test_pWd";
    localOnlyUser.email = @"test@local.only";
    localOnlyUser.isLocalOnly = YES;

    [[FOSRESTConfig sharedInstance].databaseManager saveChanges];

    [[FOSRESTConfig sharedInstance].cacheManager flushCaches:^(BOOL isCancelled, NSError *error) {
        [[FOSRESTConfig sharedInstance].loginManager loginUser:localOnlyUser handler:^(BOOL succeeded, NSError *error) {
            FOSLoginManager *loginMgr = [FOSRESTConfig sharedInstance].loginManager;

            XCTAssertTrue(succeeded, @"Login failed: %@", error);
            XCTAssertTrue(loginMgr.isLoggedIn, @"Not logged in???");
            NSString *loggedInUid = (NSString *)loginMgr.loggedInUserId;
            XCTAssertTrue([(NSString *)localOnlyUser.uid isEqualToString:loggedInUid],
                          @"Wrong logged in uid: %@", loggedInUid);
            XCTAssertTrue([(NSString *)loginMgr.loggedInUser.uid isEqualToString:(NSString *)localOnlyUser.uid],
                         @"Wrong logged in user.uid: %@.  It should be: %@",
                         loginMgr.loggedInUser.uid, localOnlyUser.uid);

            END_TEST
        }];
    }];
    
    WAIT_FOR_TEST_END
}

#pragma mark - Private Methods
+ (NSPersistentStoreCoordinator *)_setupDB {

    NSURL *appDocsDirURL =
    [[[NSFileManager defaultManager] URLsForDirectory:NSLibraryDirectory
                                            inDomains:NSUserDomainMask] lastObject];

    NSURL *storeURL = [appDocsDirURL URLByAppendingPathComponent:@"testDB.sqlite"];
    [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil];

    NSError *error = nil;

    NSURL *modelURL = [[NSBundle bundleForClass:[self class]] URLForResource:@"RESTTests"
                                                               withExtension:@"momd"];

    NSManagedObjectModel *mom = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];

    NSPersistentStoreCoordinator *persistentStoreCoordinator =
    [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:mom];

    if (![persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType
                                                  configuration:nil
                                                            URL:storeURL
                                                        options:nil
                                                          error:&error]) {

        NSLog(@"Unable to add persistent store after deleting the old file...abort: %@",
              error.description);
        abort();
    }

    return persistentStoreCoordinator;
}

+ (User *)_testUser {
    User *user = [[User alloc] init];
    user.username = @"fostest";
    user.password = @"fos!comp!rocks";
    
    return user;
}

+ (User *)_testUnknownUser {
    User *user = [[User alloc] init];
    user.username = @"unknown_user";
    user.password = @"fos!comp!rocks";
    user.objectId = @"****dummy_bad_test***";

    return user;
}


@end
